/***** Brute force solution TC- O(N^3) ***************/
class Solution {
public:
    int equalPairs(vector<vector<int>>& grid) {
        int n = grid.size();
        int count = 0;

        for (int i = 0; i < n; ++i) { // Iterate through each row
            for (int j = 0; j < n; ++j) { // Iterate through each column
                bool match = true;
                for (int k = 0; k < n; ++k) { // Compare elements
                    if (grid[i][k] != grid[k][j]) {
                        match = false;
                        break;
                    }
                }
                if (match) {
                    count++;
                }
            }
        }
        return count;
    }
};


/**************** Using HashMap **************************/
#include <vector>
#include <map>

class Solution {
public:
    int equalPairs(std::vector<std::vector<int>>& grid) {
        int n = grid.size();
        std::map<std::vector<int>, int> rowFrequencies;
        int count = 0;

        // Populate the map with row frequencies
        for (int i = 0; i < n; ++i) {
            rowFrequencies[grid[i]]++;
        }

        // Iterate through columns and check against row frequencies
        for (int j = 0; j < n; ++j) {
            std::vector<int> currentColumn;
            for (int i = 0; i < n; ++i) {
                currentColumn.push_back(grid[i][j]);
            }
            if (rowFrequencies.count(currentColumn)) {
                count += rowFrequencies[currentColumn];
            }
        }
        return count;
    }
};
