class Solution {
public:
   int cnt;
   int isSafe( int row, int col,  vector<vector<int>>& isVisited ){

        int sz = isVisited.size();
        if( row>=0 && row<sz && col>=0 && col<sz && (isVisited[row][col]==0) ){
            return 1;
        }
        else{
            return 0;
        }
   }

    void dfs(int r, int c,  vector<vector<int>>& isVisited ){

        vector<int> addr = { -2, -1, 1, 2, 2,  1,  -1, -2 };
        vector<int> addc = { 1,  2,  2, 1, -1, -2, -2, -1 };

        for( int i=0; i<addr.size(); i++){
            int Nr = r + addr[i];
            int Nc = c + addc[i];
            if( isSafe( Nr, Nc, isVisited ) ){
                isVisited[Nr][Nc] = 1;
                cnt++;
                cout<<cnt<<endl;
                dfs( Nr, Nc, isVisited );
            }
        }
    }

    bool checkValidGrid(vector<vector<int>>& grid) {
        cnt = 0;
        int n = grid.size();
       vector<vector<int>> isVisited( n , vector<int>(n, 0 ) );

        isVisited[0][0] = 1;

       dfs( 0, 0, isVisited );

       return cnt == n*n-1; 
    }
};
