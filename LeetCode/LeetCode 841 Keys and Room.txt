/// Using BFS
class Solution {
public:
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        
        int cnt=1;
        int sz = rooms.size();
        vector<int>vis(sz, 0);

        queue<int>q;
        q.push(0);
        vis[0] = 1;

        while( !q.empty() ){
            int node = q.front();
            q.pop();

            for( auto u : rooms[node] ){
                if( !vis[u] ){
                    q.push(u);
                    vis[u]=1;
                    cnt++;
                }
            }
        }

        if( cnt == sz)return true;
        else{
            return false;
        }
    }
};


/// Using DFS
int sz;
const int mx = 1001;
 int vis[mx];
int cnt;

class Solution {
public:

    void dfs(int s, vector<vector<int>>& rooms ){

        vis[s]=1;
        cnt++;
        for(int x : rooms[s])
        {
            if(vis[x]==0){
                dfs(x, rooms);
            }
        }
    }

    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        
        memset(vis, 0, sizeof(vis));
        cnt=0;

        dfs(0, rooms);

        if(cnt==rooms.size())return true;
        else{
            return false;
        }

    }
};

